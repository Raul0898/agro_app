diff --git a/android/app/build.gradle.kts b/android/app/build.gradle.kts
index b24cb5d..19a10ec 100644
--- a/android/app/build.gradle.kts
+++ b/android/app/build.gradle.kts
@@ -1,3 +1,6 @@
+import java.io.File
+import org.gradle.api.tasks.compile.JavaCompile
+
 plugins {
     id("com.android.application")
     id("kotlin-android")
@@ -48,3 +51,28 @@ java {
 flutter {
     source = "../.."
 }
+
+tasks.withType<JavaCompile>().configureEach {
+    val buildDirPath = layout.buildDirectory.get().asFile.toPath()
+    val flutterGeneratedMarker = "${File.separator}io${File.separator}flutter${File.separator}plugins${File.separator}GeneratedPluginRegistrant"
+
+    doFirst {
+        val sourceFiles = source.files
+        // The Flutter tooling generates Java registrant stubs that may invoke deprecated
+        // plugin APIs. Keep lint checks active for our own sources while silencing the
+        // warning noise from those generated files (which we cannot edit).
+        val onlyGeneratedSources = sourceFiles.isNotEmpty() && sourceFiles.all { file ->
+            val normalizedPath = file.toPath().toAbsolutePath().normalize()
+            normalizedPath.startsWith(buildDirPath) ||
+                normalizedPath.toString().contains(flutterGeneratedMarker)
+        }
+
+        options.compilerArgs.removeAll(listOf("-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-deprecation"))
+
+        if (onlyGeneratedSources) {
+            options.compilerArgs.add("-Xlint:-deprecation")
+        } else {
+            options.compilerArgs.addAll(listOf("-Xlint:deprecation", "-Xlint:unchecked"))
+        }
+    }
+}
diff --git a/tooling/android_deprecated_cleanup_log.txt b/tooling/android_deprecated_cleanup_log.txt
new file mode 100644
index 0000000..5bd1c43
--- /dev/null
+++ b/tooling/android_deprecated_cleanup_log.txt
@@ -0,0 +1 @@
+bash: command not found: flutter
